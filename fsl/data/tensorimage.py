#!/usr/bin/env python
#
# tensorimage.py - The TensorImage class.
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#
"""This module provides the :class:`.TensorImage` class, which encapsulates
the diffusion tensor data generated by the FSL ``dtifit`` tool.
"""


import                   re
import                   glob
import os.path        as op

import fsl.data.image as fslimage


def getTensorDataPrefix(path):
    """Returns the prefix used for the DTI file names in the given
    directory, or ``None`` if the DTI files could not be identified.
    """
    
    v1s   = glob.glob(op.join(path, '*_V1.*'))
    v2s   = glob.glob(op.join(path, '*_V2.*'))
    v3s   = glob.glob(op.join(path, '*_V3.*'))
    l1s   = glob.glob(op.join(path, '*_L1.*'))
    l2s   = glob.glob(op.join(path, '*_L2.*'))
    l3s   = glob.glob(op.join(path, '*_L3.*'))
    fas   = glob.glob(op.join(path, '*_FA.*'))
    mds   = glob.glob(op.join(path, '*_MD.*'))
    files = [v1s, v2s, v3s, l1s, l2s, l3s, fas, mds]
    
    # Make sure there is exactly one
    # of each of the above files
    def lenone(l):
        return len(l) == 1

    if not all(map(lenone, files)):
        return None

    files = [f[0] for f in files]

    # Make sure that all of the above
    # files have the same prefix
    pattern  = '^(.*)_(?:V1|V2|V3|L1|L2|L3|FA|MD).*$'
    prefixes = [re.findall(pattern, f)[0] for f in files]

    if any([p != prefixes[0] for p in prefixes]):
        return None

    # And there's our prefix
    return op.basename(prefixes[0])


def isPathToTensorData(path):
    """Returns ``True`` if the given directory path looks like it contains
    ``dtifit`` data, ``False`` otherwise.
    """
    
    return getTensorDataPrefix(path) is not None


class TensorImage(fslimage.Image):
    """The ``TensorImage`` class is able to load and encapsulate the diffusion
    tensor data generated by the FSL ``dtifit`` tool.
    """

    
    def __init__(self, path, *args, **kwargs):
        """
        """

        prefix = getTensorDataPrefix(path)

        if prefix is None:
            raise ValueError('Invalid path: {}'.format(path))

        fslimage.Image.__init__(
            self, op.join(path, '{}_V1'.format(prefix)), *args, **kwargs)
        
        self.__v2 = fslimage.Image(op.join(path, '{}_V2'.format(prefix)))
        self.__v3 = fslimage.Image(op.join(path, '{}_V3'.format(prefix)))
        self.__l1 = fslimage.Image(op.join(path, '{}_L1'.format(prefix)))
        self.__l2 = fslimage.Image(op.join(path, '{}_L2'.format(prefix)))
        self.__l3 = fslimage.Image(op.join(path, '{}_L3'.format(prefix)))
        self.__md = fslimage.Image(op.join(path, '{}_MD'.format(prefix)))
        self.__fa = fslimage.Image(op.join(path, '{}_FA'.format(prefix)))

        # TODO check that all of the images have the
        # same properties (resolution, xform, pixdim)
        
        self.dataSource = op.abspath(path)
        self.name       = '{}{}{}'.format(op.basename(path), op.sep, prefix)

    def FA(self): return self.__fa
    def MD(self): return self.__md
    def V1(self): return self
    def V2(self): return self.__v2
    def V3(self): return self.__v3
    def L1(self): return self.__l1
    def L2(self): return self.__l2
    def L3(self): return self.__l3
